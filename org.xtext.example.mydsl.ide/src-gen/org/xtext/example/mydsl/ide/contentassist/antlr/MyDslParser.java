/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStaffElementAccess().getAlternatives(), "rule__StaffElement__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getBracketTypeAccess().getAlternatives(), "rule__BracketType__Alternatives");
			builder.put(grammarAccess.getRestTypeAccess().getAlternatives(), "rule__RestType__Alternatives");
			builder.put(grammarAccess.getAccidentalTypeAccess().getAlternatives(), "rule__AccidentalType__Alternatives");
			builder.put(grammarAccess.getRepetitionTypeAccess().getAlternatives(), "rule__RepetitionType__Alternatives");
			builder.put(grammarAccess.getNoteNameAccess().getAlternatives(), "rule__NoteName__Alternatives");
			builder.put(grammarAccess.getNoteDurationAccess().getAlternatives(), "rule__NoteDuration__Alternatives");
			builder.put(grammarAccess.getOrnamentTypeAccess().getAlternatives(), "rule__OrnamentType__Alternatives");
			builder.put(grammarAccess.getArticulationTypeAccess().getAlternatives(), "rule__ArticulationType__Alternatives");
			builder.put(grammarAccess.getClefTypeAccess().getAlternatives(), "rule__ClefType__Alternatives");
			builder.put(grammarAccess.getCompositionAccess().getGroup(), "rule__Composition__Group__0");
			builder.put(grammarAccess.getCompositionAccess().getGroup_3(), "rule__Composition__Group_3__0");
			builder.put(grammarAccess.getCompositionAccess().getGroup_4(), "rule__Composition__Group_4__0");
			builder.put(grammarAccess.getCompositionAccess().getGroup_5(), "rule__Composition__Group_5__0");
			builder.put(grammarAccess.getCompositionAccess().getGroup_6(), "rule__Composition__Group_6__0");
			builder.put(grammarAccess.getCompositionAccess().getGroup_7(), "rule__Composition__Group_7__0");
			builder.put(grammarAccess.getCompositionAccess().getGroup_8(), "rule__Composition__Group_8__0");
			builder.put(grammarAccess.getCompositionAccess().getGroup_8_1(), "rule__Composition__Group_8_1__0");
			builder.put(grammarAccess.getCompositionAccess().getGroup_9(), "rule__Composition__Group_9__0");
			builder.put(grammarAccess.getCompositionAccess().getGroup_9_1(), "rule__Composition__Group_9_1__0");
			builder.put(grammarAccess.getBracketAccess().getGroup(), "rule__Bracket__Group__0");
			builder.put(grammarAccess.getBracketAccess().getGroup_4(), "rule__Bracket__Group_4__0");
			builder.put(grammarAccess.getStaffAccess().getGroup(), "rule__Staff__Group__0");
			builder.put(grammarAccess.getStaffAccess().getGroup_11(), "rule__Staff__Group_11__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getClefAccess().getGroup(), "rule__Clef__Group__0");
			builder.put(grammarAccess.getTimeSignatureAccess().getGroup(), "rule__TimeSignature__Group__0");
			builder.put(grammarAccess.getRestAccess().getGroup(), "rule__Rest__Group__0");
			builder.put(grammarAccess.getAccidentalAccess().getGroup(), "rule__Accidental__Group__0");
			builder.put(grammarAccess.getRepetitionAccess().getGroup(), "rule__Repetition__Group__0");
			builder.put(grammarAccess.getNoteAccess().getGroup(), "rule__Note__Group__0");
			builder.put(grammarAccess.getNoteAccess().getGroup_3(), "rule__Note__Group_3__0");
			builder.put(grammarAccess.getNoteAccess().getGroup_4(), "rule__Note__Group_4__0");
			builder.put(grammarAccess.getNoteAccess().getGroup_5(), "rule__Note__Group_5__0");
			builder.put(grammarAccess.getNoteAccess().getGroup_6(), "rule__Note__Group_6__0");
			builder.put(grammarAccess.getOrnamentAccess().getGroup(), "rule__Ornament__Group__0");
			builder.put(grammarAccess.getArticulationAccess().getGroup(), "rule__Articulation__Group__0");
			builder.put(grammarAccess.getCompositionAccess().getNameAssignment_3_1(), "rule__Composition__NameAssignment_3_1");
			builder.put(grammarAccess.getCompositionAccess().getAuthorAssignment_4_1(), "rule__Composition__AuthorAssignment_4_1");
			builder.put(grammarAccess.getCompositionAccess().getInstrumentAssignment_5_1(), "rule__Composition__InstrumentAssignment_5_1");
			builder.put(grammarAccess.getCompositionAccess().getTonalityAssignment_6_1(), "rule__Composition__TonalityAssignment_6_1");
			builder.put(grammarAccess.getCompositionAccess().getSoundTempoAssignment_7_1(), "rule__Composition__SoundTempoAssignment_7_1");
			builder.put(grammarAccess.getCompositionAccess().getBracketAssignment_8_0(), "rule__Composition__BracketAssignment_8_0");
			builder.put(grammarAccess.getCompositionAccess().getBracketAssignment_8_1_1(), "rule__Composition__BracketAssignment_8_1_1");
			builder.put(grammarAccess.getCompositionAccess().getStaffAssignment_9_0(), "rule__Composition__StaffAssignment_9_0");
			builder.put(grammarAccess.getCompositionAccess().getStaffAssignment_9_1_1(), "rule__Composition__StaffAssignment_9_1_1");
			builder.put(grammarAccess.getBracketAccess().getTypeAssignment_2(), "rule__Bracket__TypeAssignment_2");
			builder.put(grammarAccess.getBracketAccess().getStavesAssignment_3(), "rule__Bracket__StavesAssignment_3");
			builder.put(grammarAccess.getBracketAccess().getStavesAssignment_4_1(), "rule__Bracket__StavesAssignment_4_1");
			builder.put(grammarAccess.getStaffAccess().getNumberAssignment_2(), "rule__Staff__NumberAssignment_2");
			builder.put(grammarAccess.getStaffAccess().getClefAssignment_5(), "rule__Staff__ClefAssignment_5");
			builder.put(grammarAccess.getStaffAccess().getTimeAssignment_7(), "rule__Staff__TimeAssignment_7");
			builder.put(grammarAccess.getStaffAccess().getElementsAssignment_10(), "rule__Staff__ElementsAssignment_10");
			builder.put(grammarAccess.getStaffAccess().getElementsAssignment_11_1(), "rule__Staff__ElementsAssignment_11_1");
			builder.put(grammarAccess.getClefAccess().getTypeAssignment_1(), "rule__Clef__TypeAssignment_1");
			builder.put(grammarAccess.getTimeSignatureAccess().getBeatAssignment_1(), "rule__TimeSignature__BeatAssignment_1");
			builder.put(grammarAccess.getTimeSignatureAccess().getBeatTypeAssignment_3(), "rule__TimeSignature__BeatTypeAssignment_3");
			builder.put(grammarAccess.getRestAccess().getTypeAssignment_2(), "rule__Rest__TypeAssignment_2");
			builder.put(grammarAccess.getAccidentalAccess().getTypeAssignment_2(), "rule__Accidental__TypeAssignment_2");
			builder.put(grammarAccess.getAccidentalAccess().getPositionAssignment_3(), "rule__Accidental__PositionAssignment_3");
			builder.put(grammarAccess.getRepetitionAccess().getTypeAssignment_2(), "rule__Repetition__TypeAssignment_2");
			builder.put(grammarAccess.getNoteAccess().getNameAssignment_2(), "rule__Note__NameAssignment_2");
			builder.put(grammarAccess.getNoteAccess().getLyricsAssignment_3_1(), "rule__Note__LyricsAssignment_3_1");
			builder.put(grammarAccess.getNoteAccess().getDurationAssignment_4_1(), "rule__Note__DurationAssignment_4_1");
			builder.put(grammarAccess.getNoteAccess().getPositionAssignment_5_1(), "rule__Note__PositionAssignment_5_1");
			builder.put(grammarAccess.getNoteAccess().getDynamicAssignment_6_1(), "rule__Note__DynamicAssignment_6_1");
			builder.put(grammarAccess.getNoteAccess().getOrnamentAssignment_7(), "rule__Note__OrnamentAssignment_7");
			builder.put(grammarAccess.getNoteAccess().getAccidentalAssignment_8(), "rule__Note__AccidentalAssignment_8");
			builder.put(grammarAccess.getNoteAccess().getArticulationAssignment_9(), "rule__Note__ArticulationAssignment_9");
			builder.put(grammarAccess.getNoteAccess().getFermataAssignment_10(), "rule__Note__FermataAssignment_10");
			builder.put(grammarAccess.getNoteAccess().getDotAssignment_11(), "rule__Note__DotAssignment_11");
			builder.put(grammarAccess.getOrnamentAccess().getTypeAssignment_2(), "rule__Ornament__TypeAssignment_2");
			builder.put(grammarAccess.getArticulationAccess().getTypeAssignment_2(), "rule__Articulation__TypeAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
